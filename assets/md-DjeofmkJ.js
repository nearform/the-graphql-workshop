import{_ as o}from"./slidev/CodeBlockWrapper.vue_vue_type_script_setup_true_lang--uH1x1ik.js";import{o as h,c as d,k as t,e as s,l as k,m as p,ac as i,q as u,s as c,B as a}from"./modules/vue-BBMVLcIa.js";import{I as g}from"./slidev/default-Ba87BGp8.js";import{u as m,f as y}from"./slidev/context-BOR2XNhG.js";import"./modules/unplugin-icons-1iApkVVl.js";import"./index-CgsUtCqz.js";import"./modules/shiki-BYv9gApt.js";const f={class:"dense"},Q={__name:"slides.md__slidev_31",setup(v){const{$slidev:w,$nav:B,$clicksContext:r,$clicks:D,$page:x,$renderContext:_,$frontmatter:l}=m();return r.setup(),(A,e)=>{const n=o;return h(),d(g,u(c(a(y)(a(l),30))),{default:t(()=>[s("div",f,[e[1]||(e[1]=s("h1",null,"Step 8: Federation ðŸ’»",-1)),e[2]||(e[2]=s("p",null,"A GraphQL server can act as a Gateway that composes the schemas of the underlying services into one federated schema and executes queries across the services. Every underlying service must be a GraphQL server that supports the federation.",-1)),e[3]||(e[3]=s("ul",null,[s("li",null,"Create a Federated GraphQL gateway which listens on port 4000"),s("li",null,"Run and expose to the gateway two GraphQL services on ports 4001 and 4002"),s("li",null,"In order to use gateway, you should import the following lib:")],-1)),k(n,p({},{ranges:[]}),{default:t(()=>e[0]||(e[0]=[s("pre",{class:"shiki shiki-themes vitesse-dark vitesse-light slidev-code",style:{"--shiki-dark":"#dbd7caee","--shiki-light":"#393a34","--shiki-dark-bg":"#121212","--shiki-light-bg":"#ffffff"}},[s("code",{class:"language-js"},[s("span",{class:"line"},[s("span",{style:{"--shiki-dark":"#4D9375","--shiki-light":"#1E754F"}},"import"),s("span",{style:{"--shiki-dark":"#BD976A","--shiki-light":"#B07D48"}}," mercuriusGateway"),s("span",{style:{"--shiki-dark":"#4D9375","--shiki-light":"#1E754F"}}," from"),s("span",{style:{"--shiki-dark":"#C98A7D77","--shiki-light":"#B5695977"}}," '"),s("span",{style:{"--shiki-dark":"#C98A7D","--shiki-light":"#B56959"}},"@mercuriusjs/gateway"),s("span",{style:{"--shiki-dark":"#C98A7D77","--shiki-light":"#B5695977"}},"'")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-dark":"#666666","--shiki-light":"#999999"}},"...")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-dark":"#BD976A","--shiki-light":"#B07D48"}},"gateway"),s("span",{style:{"--shiki-dark":"#666666","--shiki-light":"#999999"}},"."),s("span",{style:{"--shiki-dark":"#80A665","--shiki-light":"#59873A"}},"register"),s("span",{style:{"--shiki-dark":"#666666","--shiki-light":"#999999"}},"("),s("span",{style:{"--shiki-dark":"#BD976A","--shiki-light":"#B07D48"}},"mercuriusGateway"),s("span",{style:{"--shiki-dark":"#666666","--shiki-light":"#999999"}},","),s("span",{style:{"--shiki-dark":"#666666","--shiki-light":"#999999"}}," {...});")])])],-1)])),_:1},16),e[4]||(e[4]=s("ul",null,[s("li",null,[i("Service 1 has a "),s("code",null,"User"),i(" type and a "),s("code",null,"me"),i(" query which returns the user")]),s("li",null,[i("Service 2 has a "),s("code",null,"Post"),i(" type and extends "),s("code",null,"User"),i(" with a "),s("code",null,"posts"),i(" array which are the posts of that user")])],-1))])]),_:1},16)}}};export{Q as default};
