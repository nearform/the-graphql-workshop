import{o as a,c as i,k as n,e,ac as t,q as u,s as c,B as o}from"./modules/vue-BBMVLcIa.js";import{I as d}from"./slidev/default-Ba87BGp8.js";import{u as p,f as h}from"./slidev/context-BOR2XNhG.js";import"./index-CgsUtCqz.js";import"./modules/shiki-BYv9gApt.js";const j={__name:"slides.md__slidev_44",setup(m){const{$slidev:f,$nav:v,$clicksContext:r,$clicks:x,$page:g,$renderContext:y,$frontmatter:s}=p();return r.setup(),(_,l)=>(a(),i(d,u(c(o(h)(o(s),43))),{default:n(()=>l[0]||(l[0]=[e("div",{class:"dense"},[e("h1",null,"Step 11: Authorization"),e("ul",null,[e("li",null,[t("Install the "),e("code",null,"mercurius-auth"),t(" package and register it with the gateway")]),e("li",null,[t("Specify the following properties in the options object for the plugin: "),e("ul",null,[e("li",null,[e("code",null,"authDirective"),t(" - the name of the directive you just defined")]),e("li",null,[e("code",null,"authContext"),t(" - logic to extract the user’s role. For simplicity’s sake, we will extract the user’s role from the "),e("code",null,"X-Role"),t(" request header. In a real-world application, you may pass a JSON Web Token (JWT) via the headers, verify and decode it to extract the user’s ID, role(s), and permission(s).")]),e("li",null,[e("code",null,"applyPolicy"),t(" - logic that determines, given the user’s role, whether the server should allow the client to access this field or object?")])])])])],-1)])),_:1},16))}};export{j as default};
