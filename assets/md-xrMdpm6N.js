import{o as a,c as r,k as i,q as n,s as c,B as o,e,aa as t}from"./modules/vue-9M24w38T.js";import{I as u}from"./slidev/default-CI3DwVw6.js";import{u as d,f as h}from"./slidev/context-CpFYtyQh.js";import"./index-x7sAMbJ8.js";import"./modules/shiki-D165QSPi.js";const p=e("div",{class:"dense"},[e("h1",null,"Step 11: Authorization"),e("ul",null,[e("li",null,[t("Install the "),e("code",null,"mercurius-auth"),t(" package and register it with the gateway")]),e("li",null,[t("Specify the following properties in the options object for the plugin: "),e("ul",null,[e("li",null,[e("code",null,"authDirective"),t(" - the name of the directive you just defined")]),e("li",null,[e("code",null,"authContext"),t(" - logic to extract the user’s role. For simplicity’s sake, we will extract the user’s role from the "),e("code",null,"X-Role"),t(" request header. In a real-world application, you may pass a JSON Web Token (JWT) via the headers, verify and decode it to extract the user’s ID, role(s), and permission(s).")]),e("li",null,[e("code",null,"applyPolicy"),t(" - logic that determines, given the user’s role, whether the server should allow the client to access this field or object?")])])])])],-1),m={__name:"slides.md__slidev_44",setup(f){const{$slidev:_,$nav:v,$clicksContext:l,$clicks:x,$page:g,$renderContext:y,$frontmatter:s}=d();return l.setup(),(w,k)=>(a(),r(u,n(c(o(h)(o(s),43))),{default:i(()=>[p]),_:1},16))}},P=m;export{P as default};
